---
- name: Create resources playbook
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key | default(omit) }}"
      aws_secret_key: "{{ aws_secret_key | default(omit) }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ region | default(aws_region) }}"
  block:
    - name: Get image ID to create an instance
      amazon.aws.ec2_ami_info:
        filters:
          architecture: x86_64
          virtualization-type: hvm
          root-device-type: ebs
          name: "{{ image_filter }}"
      register: images

    - name: List availability zones from aws region
      amazon.aws.aws_az_info:
      register: zones

    - name: Set region_av_zones' variable
      ansible.builtin.set_fact:
        region_av_zones: "{{ zones.availability_zones | map(attribute='zone_name') }}"

    - name: Create a VPC to work in
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        name: "{{ vpc_name }}"
      register: vpc

    # Public and Private subnets should be in the same availability zone
    # So that the load balancer can target workers instances
    - name: Set 'shared_az' variable
      ansible.builtin.set_fact:
        shared_az: "{{ region_av_zones[0] }}"

    - name: Create a public subnet for bastion
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr[0] }}"
        az: "{{ shared_az }}"
      register: subnet

    - name: Create private subnet for workers
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr[1] }}"
        az: "{{ shared_az }}"
      register: private_subnet

    - name: Create another private subnet for RDS
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr[2] }}"
        az: "{{ region_av_zones[1] }}"
      register: rds_subnet

    - name: Create subnet group for RDS instance
      amazon.aws.rds_subnet_group:
        name: "{{ rds_subnet_group_name }}"
        description: subnet group for RDS instance to be hidden
        subnets:
          - "{{ rds_subnet.subnet.id }}"
          - "{{ private_subnet.subnet.id }}"
        state: present

    - name: Create internet gateway attached to the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: internet_gw

    - name: Create NAT gateway (allow access to internet for instances in private subnet)
      amazon.aws.ec2_vpc_nat_gateway:
        subnet_id: "{{ subnet.subnet.id }}"
        if_exist_do_not_create: true
        wait: true
        state: present
      register: nat_gw

    - name: Create Route table for internet gateway (public subnet)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ internet_gw.gateway_id }}"
        lookup: tag
        resource_tags:
          subnet: public
          route: internet
        state: present

    - name: Create Route table for NAT gateway (private subnet)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        subnets:
          - "{{ private_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ nat_gw.nat_gateway_id }}"
        lookup: tag
        resource_tags:
          subnet: private
          route: nat-gateway
        state: present

    - name: Create security group for bastion
      amazon.aws.ec2_security_group:
        name: "{{ public_secgroup_name }}"
        vpc_id: "{{ vpc.vpc.id }}"
        description: Security group for Bastion host
        rules:
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: 22
            to_port: 22
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: "{{ deploy_flask_app_listening_port }}"
            to_port: "{{ deploy_flask_app_listening_port }}"
        rules_egress:
          - cidr_ip: 0.0.0.0/0
            proto: -1
        tags: "{{ resource_tags }}"
        state: present
      register: secgroup

    - name: Create security group for RDS instance
      amazon.aws.ec2_security_group:
        name: "{{ rds_secgroup_name }}"
        vpc_id: "{{ vpc.vpc.id }}"
        description: Security group to allow RDS instance port
        rules:
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: "{{ rds_listening_port }}"
            to_port: "{{ rds_listening_port }}"
        tags: "{{ resource_tags }}"
        state: present
      register: rds_sg

    - name: RDS creation
      when: not "aurora" in rds_engine
      block:
        - name: Get RDS instance info
          amazon.aws.rds_instance_info:
            db_instance_identifier: "{{ rds_identifier }}"
          register: rds_result

        - name: Create RDS instance
          when: rds_result.instances | length == 0
          block:
            - name: Create RDS instance (PostGreSQL Database)
              amazon.aws.rds_instance:
                force_update_password: true
                wait: true
                allocated_storage: "{{ rds_allocated_storage_gb }}"
                backup_retention_period: 0
                db_instance_class: "{{ rds_instance_class }}"
                db_instance_identifier: "{{ rds_identifier }}"
                db_name: "{{ rds_instance_name }}"
                engine: "{{ rds_engine }}"
                engine_version: "{{ rds_engine_version }}"
                master_user_password: "{{ deploy_flask_app_rds_master_password }}"
                master_username: "{{ deploy_flask_app_rds_master_username }}"
                monitoring_interval: 0
                storage_type: standard
                skip_final_snapshot: true
                db_subnet_group_name: "{{ rds_subnet_group_name }}"
                vpc_security_group_ids:
                  - "{{ rds_sg.group_id }}"
              when: rds_snapshot_arn is not defined

            - name: Create RDS instance from snapshot (PostGreSQL Database)
              amazon.aws.rds_instance:
                force_update_password: true
                wait: true
                allocated_storage: "{{ rds_allocated_storage_gb }}"
                backup_retention_period: 0
                db_instance_class: "{{ rds_instance_class }}"
                db_instance_identifier: "{{ rds_identifier }}"
                engine: "{{ rds_engine }}"
                engine_version: "{{ rds_engine_version }}"
                master_user_password: "{{ deploy_flask_app_rds_master_password }}"
                master_username: "{{ deploy_flask_app_rds_master_username }}"
                monitoring_interval: 0
                storage_type: standard
                skip_final_snapshot: true
                db_subnet_group_name: "{{ rds_subnet_group_name }}"
                vpc_security_group_ids:
                  - "{{ rds_sg.group_id }}"
                creation_source: snapshot
                db_snapshot_identifier: "{{ rds_snapshot_arn }}"
              when: rds_snapshot_arn is defined

        - name: Get RDS instance info
          amazon.aws.rds_instance_info:
            db_instance_identifier: "{{ rds_identifier }}"
          register: rds_result

    - name: Set variable for SSH private key file path
      ansible.builtin.set_fact:
        deploy_flask_app_bastion_ssh_private_key_path: "~/.{{ resource_prefix }}_id_rsa"
      when: deploy_flask_app_bastion_ssh_private_key_path is undefined

    - name: Create key pair to connect to the workers
      amazon.aws.ec2_key:
        name: "{{ deploy_flask_app_sshkey_pair_name }}"
      register: keypair_result

    - name: Save private key into a file
      ansible.builtin.copy:
        content: "{{ keypair_result.key.private_key }}"
        dest: "{{ deploy_flask_app_bastion_ssh_private_key_path }}"
        mode: 0600
      when: keypair_result is changed

    - name: Ensure IAM instance role exists
      amazon.aws.iam_role:
        name: "{{ ec2_iam_role_name }}"
        assume_role_policy_document: "{{ lookup('file', 'ec2-trust-policy.json') }}"
        state: present
        create_instance_profile: true
        wait: true
      register: role_output

    - name: Create a virtual machine
      amazon.aws.ec2_instance:
        name: "{{ deploy_flask_app_bastion_host_name }}"
        instance_type: "{{ bastion_host_type }}"
        image_id: "{{ images.images.0.image_id }}"
        key_name: "{{ deploy_flask_app_sshkey_pair_name }}"
        subnet_id: "{{ subnet.subnet.id }}"
        ebs_optimized: true
        instance_role: "{{ role_output.iam_role.role_name }}"
        network:
          assign_public_ip: true
          groups:
            - "{{ secgroup.group_id }}"
        security_groups:
          - "{{ secgroup.group_id }}"
        user_data: |
          #!/bin/bash
          yum install -y python3 python-virtualenv sshpass netcat ansible
        wait: true
        state: started
      register: vm_result

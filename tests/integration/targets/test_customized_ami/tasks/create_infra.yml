---
- name: Create EC2 resources
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Create a VPC to work in
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ ami_infra_vpc_cidr }}"
        name: "{{ ami_vpc_name }}"
      register: test__vpc

    - name: Create a public subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ test__vpc.vpc.id }}"
        cidr: "{{ ami_infra_subnet_cidr }}"
      register: test__subnet

    - name: Create internet gateway attached to the VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ test__vpc.vpc.id }}"
        state: present
      register: test__internet_gateway

    - name: Create Route table for internet gateway (public subnet)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ test__vpc.vpc.id }}"
        subnets:
          - "{{ test__subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ test__internet_gateway.gateway_id }}"
        lookup: tag
        tags:
          ansible_test_prefix: "{{ resource_prefix }}"
        state: present

    - name: Create security group allowing SSH connection
      amazon.aws.ec2_security_group:
        name: "{{ ami_security_group }}"
        vpc_id: "{{ test__vpc.vpc.id }}"
        description: "{{ ami_security_group_desc }}"
        rules:
          - cidr_ip: 0.0.0.0/0
            proto: tcp
            from_port: 22
            to_port: 22
        rules_egress:
          - cidr_ip: 0.0.0.0/0
            proto: -1
        state: present
      register: test__security_group

    - name: Create key pair to connect to the VM
      amazon.aws.ec2_key:
        name: "{{ ami_key_name }}"
        key_material: "{{ lookup('file', setup_rsa_keys__public_key_file) }}"

    - name: Get custom AMI information
      amazon.aws.ec2_ami_info:
        filters:
          name: "{{ custom_ami_name }}"
      register: test__amis

    - name: Fail when AMI with name is not found
      ansible.builtin.fail:
        msg: "Unable to find AMI with name: {{ custom_ami_name }}"
      when: test__amis.images | length == 0

    - name: Create a virtual machine
      amazon.aws.ec2_instance:
        name: "{{ ami_ec2_instance_name }}"
        instance_type: "{{ ami_ec2_instance_type }}"
        image_id: "{{ test__amis.images.0.image_id }}"
        key_name: "{{ ami_key_name }}"
        subnet_id: "{{ test__subnet.subnet.id }}"
        network:
          assign_public_ip: true
          groups:
            - "{{ test__security_group.group_id }}"
        security_groups:
          - "{{ test__security_group.group_id }}"
        wait: true
        state: started
      register: test__ec2_instance

    - name: Add host to inventory
      ansible.builtin.add_host:
        hostname: "{{ ami_ec2_instance_name }}"
        ansible_ssh_user: "{{ ami_user_name }}"
        ansible_host: "{{ test__ec2_instance.instances.0.public_ip_address }}"
        ansible_ssh_common_args: -o "UserKnownHostsFile=/dev/null" -o StrictHostKeyChecking=no -i {{ setup_rsa_keys__private_key_file }}
        ansible_python_interpreter: auto
